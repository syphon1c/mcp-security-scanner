name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22.x
        
    - name: Run tests
      run: go test -v $(go list ./... | grep -v test/utils)
        
    - name: Build release binaries
      run: |
        mkdir -p dist
        
        # Linux amd64
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }}" -o dist/mcpscan-linux-amd64 ./cmd/mcpscan
        
        # Linux arm64
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }}" -o dist/mcpscan-linux-arm64 ./cmd/mcpscan
        
        # macOS amd64
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }}" -o dist/mcpscan-darwin-amd64 ./cmd/mcpscan
        
        # macOS arm64 (Apple Silicon)
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }}" -o dist/mcpscan-darwin-arm64 ./cmd/mcpscan
        
        # Windows amd64
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }}" -o dist/mcpscan-windows-amd64.exe ./cmd/mcpscan
        
    - name: Create compressed archives
      run: |
        cd dist
        
        # Create tar.gz for Unix systems
        tar -czf mcpscan-linux-amd64.tar.gz mcpscan-linux-amd64
        tar -czf mcpscan-linux-arm64.tar.gz mcpscan-linux-arm64
        tar -czf mcpscan-darwin-amd64.tar.gz mcpscan-darwin-amd64
        tar -czf mcpscan-darwin-arm64.tar.gz mcpscan-darwin-arm64
        
        # Create zip for Windows
        zip mcpscan-windows-amd64.zip mcpscan-windows-amd64.exe
        
    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract changelog for current version if CHANGELOG.md exists
          awk '/^## \['${GITHUB_REF_NAME#v}'\]/{flag=1;next}/^## \[/{flag=0}flag' CHANGELOG.md > current_changelog.md
          echo "changelog_file=current_changelog.md" >> $GITHUB_OUTPUT
        else
          # Generate basic changelog from git commits
          echo "## Changes in ${{ github.ref_name }}" > current_changelog.md
          echo "" >> current_changelog.md
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s" >> current_changelog.md
          echo "changelog_file=current_changelog.md" >> $GITHUB_OUTPUT
        fi
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.tar.gz
          dist/*.zip
        body_path: current_changelog.md
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update package managers (if applicable)
      run: |
        echo "üç∫ Consider updating Homebrew formula"
        echo "üì¶ Consider updating other package managers"
        echo "Release ${{ github.ref_name }} created successfully!"
